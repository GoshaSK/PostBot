import telebot
from dotenv import load_dotenv
import os
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import threading
import time
from datetime import datetime

load_dotenv()
ADMIN_IDS = [837587233, 1074444081, 810752125]
CHANNEL_ID = '-1002636786440'

bot = telebot.TeleBot(os.getenv("BOT_TOKEN"))
user_state = {}
scheduled_posts = []
pending_idea_users = {}


def safe_send_message(chat_id, text, **kwargs):
    try:
        bot.send_message(chat_id, text, **kwargs)
    except Exception as e:
        print(f"[send_message] –û—à–∏–±–∫–∞: {e}")


@bot.message_handler(commands=['start'])
def handle_start(message):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤.\n\n"
        "üõçÔ∏è –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ ‚Äî –æ–Ω–∞ –ø—Ä–æ–π–¥—ë—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ –ø–æ—è–≤–∏—Ç—Å—è –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ!\n\n"
        "üì© –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞, —Ä–µ–∫–ª–∞–º—ã –∏–ª–∏ –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –±–æ—Ç–∞ –ª—é–±–æ–≥–æ –≤–∏–¥–∞ ‚Äî –ø–∏—à–∏ @idhxjsnd üíº"
    )
    safe_send_message(message.chat.id, text)


@bot.message_handler(commands=['user'])
def handle_user_menu(message):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data='user_add_product'))
    safe_send_message(message.chat.id, "üßæ –ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä (–ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏).",reply_markup=markup)


@bot.message_handler(commands=['admin'])
def handle_admin(message):
    if message.from_user.id in ADMIN_IDS:
        markup = types.InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data='add_product'))
        markup.add(InlineKeyboardButton("üëï –î–æ–±–∞–≤–∏—Ç—å –∞—É—Ç—Ñ–∏—Ç", callback_data='add_outfit'))
        markup.add(InlineKeyboardButton("üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏", callback_data='scheduled_cards'))
        safe_send_message(message.chat.id, "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=markup)
    else:
        safe_send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")


@bot.message_handler(commands=['idea'])
def handle_idea_command(message):
    user_id = message.from_user.id
    pending_idea_users[user_id] = True
    safe_send_message(message.chat.id, "üí° –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –∏–¥–µ—é, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–º–µ—á–∞–Ω–∏–µ –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")


@bot.message_handler(func=lambda m: m.from_user.id in pending_idea_users)
def handle_idea_message(message):
    user_id = message.from_user.id
    idea_text = message.text

    main_admin_id = ADMIN_IDS[0] if ADMIN_IDS else None
    if main_admin_id:
        safe_send_message(main_admin_id, f"üì• –ù–æ–≤–∞—è –∏–¥–µ—è –æ—Ç @{message.from_user.username or user_id}:\n\n{idea_text}")
        safe_send_message(message.chat.id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∏–¥–µ—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    else:
        safe_send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")

    pending_idea_users.pop(user_id, None)


@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    user_id = call.from_user.id

    if call.data == 'add_product':
        if user_id in ADMIN_IDS:
            if user_id in user_state and user_state[user_id].get('step') != 'done':
                return
            else:
                user_state[user_id] = {'step': 'title'}
                safe_send_message(call.message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>:", parse_mode='HTML')
        else:
            safe_send_message(call.message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    elif call.data == 'user_add_product':
        if user_id in user_state and user_state[user_id].get('step') != 'done':
            return
        else:
            user_state[user_id] = {'step': 'user_title', 'is_user': True}
            safe_send_message(call.message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>:", parse_mode='HTML')

    elif call.data == 'user_finish_photos':
        state = user_state.get(user_id)
        if not state or state.get('step') != 'user_photo':
            return bot.answer_callback_query(call.id, "‚è≥ –°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –∑–∞–≤–µ—Ä—à–∏—Ç—å")

        if 'photos' not in state or not state['photos']:
            return bot.answer_callback_query(call.id, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ.")

        caption = (
            f"<b>{state['title']}</b>\n"
            f"üí∞ –¶–µ–Ω–∞: <b>{state['price']}</b>\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: <b>{state['rating']}</b>\n"
            f"üî¢ –ê—Ä—Ç–∏–∫—É–ª: <code>{state['sku']}</code>\n"
            f"üè∑Ô∏è –¢–µ–≥–∏: {state.get('tags', '')}\n"
            f"üîó <a href=\"{state['link']}\">–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä</a>"
        )
        media = [types.InputMediaPhoto(p) for p in state['photos']]
        media[0].caption = caption
        media[0].parse_mode = 'HTML'

        admin_id = ADMIN_IDS[0]
        mod_markup = InlineKeyboardMarkup()
        mod_markup.add(
            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f'mod_approve_{user_id}'),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'mod_reject_{user_id}')
        )
        bot.send_media_group(admin_id, media)
        safe_send_message(admin_id, "üîé –ù–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:", reply_markup=mod_markup)

        safe_send_message(call.message.chat.id, "üïµÔ∏è‚Äç‚ôÄÔ∏è –ö–∞—Ä—Ç–æ—á–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ú—ã —Å–æ–æ–±—â–∏–º, –∫–æ–≥–¥–∞ –µ—ë –æ–¥–æ–±—Ä—è—Ç.")
        user_state.pop(user_id, None)
        bot.answer_callback_query(call.id)

    elif call.data.startswith('mod_approve_'):
        target_user_id = int(call.data.split('_')[-1])
        state = user_state.get(target_user_id)
        if state:
            caption = (
                f"<b>{state['title']}</b>\n"
                f"üí∞ –¶–µ–Ω–∞: <b>{state['price']}</b>\n"
                f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: <b>{state['rating']}</b>\n"
                f"üî¢ –ê—Ä—Ç–∏–∫—É–ª: <code>{state['sku']}</code>\n"
                f"üè∑Ô∏è –¢–µ–≥–∏: {state.get('tags', '')}\n"
                f"üîó <a href=\"{state['link']}\">–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä</a>"
            )
            media = [types.InputMediaPhoto(p) for p in state['photos']]
            media[0].caption = caption
            media[0].parse_mode = 'HTML'
            bot.send_media_group(CHANNEL_ID, media)
            safe_send_message(target_user_id, "‚úÖ –í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
            user_state.pop(target_user_id, None)
        bot.answer_callback_query(call.id)

    elif call.data.startswith('mod_reject_'):
        target_user_id = int(call.data.split('_')[-1])
        safe_send_message(target_user_id, "‚ùå –í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")
        user_state.pop(target_user_id, None)
        bot.answer_callback_query(call.id)

    elif call.data == 'add_outfit':
        if user_id in ADMIN_IDS:
            current_step = user_state.get(user_id, {}).get('step')
            if current_step and current_step.startswith('outfit') and current_step != 'done':
                return
            user_state[user_id] = {'step': 'outfit_count', 'outfit_items': []}
            safe_send_message(call.message.chat.id, "üëó –°–∫–æ–ª—å–∫–æ –≤–µ—â–µ–π –≤ –∞—É—Ç—Ñ–∏—Ç–µ? (–æ—Ç 1 –¥–æ 10)")
        else:
            safe_send_message(call.message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    elif call.data == 'scheduled_cards':
        if not scheduled_posts:
            safe_send_message(call.message.chat.id, "üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫.")
            return

        for i, post in enumerate(scheduled_posts):
            preview = post['media'][0].caption[:80] + '...'
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f'delete_scheduled_{i}'))
            safe_send_message(call.message.chat.id, f"üìÖ –í—Ä–µ–º—è: <b>{post['time']}</b>\nüìù {preview}", parse_mode='HTML', reply_markup=markup)
        bot.answer_callback_query(call.id)

    elif call.data.startswith('delete_scheduled_'):
        try:
            index = int(call.data.split('_')[-1])
            if 0 <= index < len(scheduled_posts):
                deleted = scheduled_posts.pop(index)
                bot.send_message(call.message.chat.id, f"üóë –£–¥–∞–ª–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ {deleted['time']}")
            else:
                bot.send_message(call.message.chat.id, "‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        bot.answer_callback_query(call.id)

    elif call.data == 'delete_card':
        user_state.pop(user_id, None)
        safe_send_message(call.message.chat.id, "üóë –ö–∞—Ä—Ç–æ—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
        bot.answer_callback_query(call.id)

    elif call.data == 'delete_outfit':
        user_state.pop(user_id, None)
        safe_send_message(call.message.chat.id, "üóë –ê—É—Ç—Ñ–∏—Ç —É–¥–∞–ª—ë–Ω.")
        bot.answer_callback_query(call.id)

    elif call.data == 'finish_photos':
        state = user_state.get(user_id)
        if not state or state.get('step') != 'photo':
            return bot.answer_callback_query(call.id, "‚è≥ –°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –∑–∞–≤–µ—Ä—à–∏—Ç—å")

        if 'photos' not in state or not state['photos']:
            return bot.answer_callback_query(call.id, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ.")

        caption = (
            f"<b>{state['title']}</b>\n"
            f"üí∞ –¶–µ–Ω–∞: <b>{state['price']}</b>\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: <b>{state['rating']}</b>\n"
            f"üî¢ –ê—Ä—Ç–∏–∫—É–ª: <code>{state['sku']}</code>\n"
            f"üè∑Ô∏è –¢–µ–≥–∏: {state.get('tags', '')}\n"
            f"üîó <a href=\"{state['link']}\">–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä</a>"
        )

        media = [types.InputMediaPhoto(p) for p in state['photos']]
        media[0].caption = caption
        media[0].parse_mode = 'HTML'
        state['product_caption'] = caption

        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton("üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data='publish_now'),
            InlineKeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data='schedule_later'),
            InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data='delete_card')
        )

        bot.send_media_group(call.message.chat.id, media)
        safe_send_message(call.message.chat.id, "‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=markup)
        bot.answer_callback_query(call.id)

    elif call.data == 'finish_outfit':
        state = user_state.get(user_id)
        if not state or state.get('step') != 'outfit_photo':
            return bot.answer_callback_query(call.id, "‚è≥ –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ–π—á–∞—Å.")

        if 'photos' not in state or not state['photos']:
            return bot.answer_callback_query(call.id, "‚ö†Ô∏è –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ.")

        outfit_text = "‚ú® <b>–°–¢–ò–õ–¨–ù–´–ô –ê–£–¢–§–ò–¢</b> ‚ú®\n\n"
        for i, item in enumerate(state['outfit_items'], 1):
            outfit_text += (
                f"üß• <b>#{i}</b> ‚Äî <a href=\"{item['link']}\">{item['title']}</a>\n"
                f"üí∏ –¶–µ–Ω–∞: <b>{item['price']}</b>\n"
                f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: <b>{item['rating']}</b>\n"
                f"üî¢ –ê—Ä—Ç–∏–∫—É–ª: <code>{item['sku']}</code>\n\n"
            )
        tags = state.get('tags', '')
        if tags:
            outfit_text += f"üè∑Ô∏è {tags}"

        media = [types.InputMediaPhoto(p) for p in state['photos']]
        media[0].caption = outfit_text
        media[0].parse_mode = 'HTML'
        state['outfit_caption'] = outfit_text

        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton("üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data='publish_now_outfit'),
            InlineKeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data='schedule_outfit'),
            InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data='delete_outfit')
        )

        bot.send_media_group(call.message.chat.id, media)
        safe_send_message(call.message.chat.id, "‚úÖ –ê—É—Ç—Ñ–∏—Ç –≥–æ—Ç–æ–≤. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=markup)
        bot.answer_callback_query(call.id)

    elif call.data == 'publish_now':
        state = user_state.get(user_id)
        if not state:
            return bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        media = [types.InputMediaPhoto(p) for p in state['photos']]
        media[0].caption = state['product_caption']
        media[0].parse_mode = 'HTML'
        bot.send_media_group(CHANNEL_ID, media)
        safe_send_message(call.message.chat.id, "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª.")
        user_state.pop(user_id, None)
        bot.answer_callback_query(call.id)

    elif call.data == 'publish_now_outfit':
        state = user_state.get(user_id)
        if not state:
            return bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        media = [types.InputMediaPhoto(p) for p in state['photos']]
        media[0].caption = state['outfit_caption']
        media[0].parse_mode = 'HTML'
        bot.send_media_group(CHANNEL_ID, media)
        safe_send_message(call.message.chat.id, "‚úÖ –ê—É—Ç—Ñ–∏—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª.")
        user_state.pop(user_id, None)
        bot.answer_callback_query(call.id)

    elif call.data == 'schedule_later':
        user_state[user_id]['step'] = 'schedule_time'
        safe_send_message(call.message.chat.id, "üïí –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>HH:MM</code>", parse_mode='HTML')
        bot.answer_callback_query(call.id)

    elif call.data == 'schedule_outfit':
        user_state[user_id]['step'] = 'schedule_time_outfit'
        safe_send_message(call.message.chat.id, "üïí –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞—É—Ç—Ñ–∏—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>HH:MM</code>", parse_mode='HTML')
        bot.answer_callback_query(call.id)


@bot.message_handler(func=lambda m: m.from_user.id in user_state and m.content_type == 'text')
def handle_steps(message):
    user_id = message.from_user.id
    state = user_state[user_id]

    if state.get('is_user') and state['step'] == 'user_title':
        state['title'] = message.text
        state['step'] = 'user_price'
        safe_send_message(message.chat.id, "üí∞ –í–≤–µ–¥–∏—Ç–µ <b>—Ü–µ–Ω—É</b> —Ç–æ–≤–∞—Ä–∞:\n (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1347 —Ä—É–±.)", parse_mode='HTML')

    elif state.get('is_user') and state['step'] == 'user_price':
        state['price'] = message.text
        state['step'] = 'user_rating'
        safe_send_message(message.chat.id, "‚≠ê –í–≤–µ–¥–∏—Ç–µ <b>—Ä–µ–π—Ç–∏–Ω–≥</b> —Ç–æ–≤–∞—Ä–∞ –æ—Ç 1 –¥–æ 5:\n (–Ω–∞–ø—Ä–∏–º–µ—Ä: 4.6)", parse_mode='HTML')

    elif state.get('is_user') and state['step'] == 'user_rating':
        state['rating'] = message.text
        state['step'] = 'user_sku'
        safe_send_message(message.chat.id, "üî¢ –í–≤–µ–¥–∏—Ç–µ <b>–∞—Ä—Ç–∏–∫—É–ª</b>:", parse_mode='HTML')

    elif state.get('is_user') and state['step'] == 'user_sku':
        state['sku'] = message.text
        state['step'] = 'user_link'
        safe_send_message(message.chat.id, "üîó –í–≤–µ–¥–∏—Ç–µ <b>—Å—Å—ã–ª–∫—É</b> –Ω–∞ —Ç–æ–≤–∞—Ä:\n (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://www.wildberries.ru/catalog/4534556/detail.aspx)", parse_mode='HTML')

    elif state.get('is_user') and state['step'] == 'user_link':
        state['link'] = message.text
        state['step'] = 'user_tags'
        safe_send_message(message.chat.id, "üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: #–ª–µ—Ç–æ #—Å—Ç–∏–ª—å):")

    elif state.get('is_user') and state['step'] == 'user_tags':
        state['tags'] = message.text
        state['step'] = 'user_photo'
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data='user_finish_photos'))
        safe_send_message(message.chat.id, "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Ñ–æ—Ç–æ</b> –∏ –Ω–∞–∂–º–∏—Ç–µ <b>–ì–æ—Ç–æ–≤–æ</b>", parse_mode='HTML', reply_markup=markup)

    if state['step'] == 'title':
        state['title'] = message.text
        state['step'] = 'price'
        safe_send_message(message.chat.id, "üí∞ –í–≤–µ–¥–∏—Ç–µ <b>—Ü–µ–Ω—É</b> —Ç–æ–≤–∞—Ä–∞:", parse_mode='HTML')

    elif state['step'] == 'price':
        state['price'] = message.text
        state['step'] = 'rating'
        safe_send_message(message.chat.id, "‚≠ê –í–≤–µ–¥–∏—Ç–µ <b>—Ä–µ–π—Ç–∏–Ω–≥</b> —Ç–æ–≤–∞—Ä–∞:", parse_mode='HTML')

    elif state['step'] == 'rating':
        state['rating'] = message.text
        state['step'] = 'sku'
        safe_send_message(message.chat.id, "üî¢ –í–≤–µ–¥–∏—Ç–µ <b>–∞—Ä—Ç–∏–∫—É–ª</b> —Ç–æ–≤–∞—Ä–∞:", parse_mode='HTML')

    elif state['step'] == 'sku':
        state['sku'] = message.text
        state['step'] = 'link'
        safe_send_message(message.chat.id, "üîó –í–≤–µ–¥–∏—Ç–µ <b>—Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä</b>:", parse_mode='HTML')

    elif state['step'] == 'link':
        state['link'] = message.text
        state['step'] = 'tags'
        safe_send_message(message.chat.id, "üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: #–ª–µ—Ç–æ #–Ω–æ–≤–∏–Ω–∫–∞):")

    elif state['step'] == 'tags':
        state['tags'] = message.text
        state['step'] = 'photo'
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data='finish_photos'))
        safe_send_message(message.chat.id, "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Ñ–æ—Ç–æ</b> —Ç–æ–≤–∞—Ä–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ <b>–ì–æ—Ç–æ–≤–æ</b>", parse_mode='HTML', reply_markup=markup)

    elif state['step'] == 'schedule_time':
        try:
            datetime.strptime(message.text.strip(), '%H:%M')
            media = [types.InputMediaPhoto(p) for p in state['photos']]
            media[0].caption = state['product_caption']
            media[0].parse_mode = 'HTML'
            scheduled_posts.append({'time': message.text.strip(), 'media': media})
            bot.send_message(message.chat.id, f"‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {message.text.strip()}")
            user_state.pop(user_id, None)
        except ValueError:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM")

    elif state['step'] == 'schedule_time_outfit':
        try:
            datetime.strptime(message.text.strip(), '%H:%M')
            media = [types.InputMediaPhoto(p) for p in state['photos']]
            media[0].caption = state['outfit_caption']
            media[0].parse_mode = 'HTML'
            scheduled_posts.append({'time': message.text.strip(), 'media': media})
            bot.send_message(message.chat.id, f"‚úÖ –ê—É—Ç—Ñ–∏—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {message.text.strip()}")
            user_state.pop(user_id, None)
        except ValueError:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM")

    elif state['step'] == 'outfit_count':
        try:
            count = int(message.text)
            if 1 <= count <= 10:
                state['outfit_total'] = count
                state['step'] = 'outfit_title'
                state['current_index'] = 0
                safe_send_message(message.chat.id, "üß• –í–µ—â—å 1: –í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b>:", parse_mode='HTML')
            else:
                bot.send_message(message.chat.id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.")
        except ValueError:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

    elif state['step'] == 'outfit_title':
        state.setdefault('current_item', {})['title'] = message.text
        state['step'] = 'outfit_price'
        safe_send_message(message.chat.id, "üí∞ –í–≤–µ–¥–∏—Ç–µ <b>—Ü–µ–Ω—É</b> —ç—Ç–æ–π –≤–µ—â–∏:", parse_mode='HTML')

    elif state['step'] == 'outfit_price':
        state['current_item']['price'] = message.text
        state['step'] = 'outfit_sku'
        safe_send_message(message.chat.id, "üî¢ –í–≤–µ–¥–∏—Ç–µ <b>–∞—Ä—Ç–∏–∫—É–ª</b> —ç—Ç–æ–π –≤–µ—â–∏:", parse_mode='HTML')

    elif state['step'] == 'outfit_sku':
        state['current_item']['sku'] = message.text
        state['step'] = 'outfit_rating'
        safe_send_message(message.chat.id, "‚≠ê –í–≤–µ–¥–∏—Ç–µ <b>—Ä–µ–π—Ç–∏–Ω–≥</b> —ç—Ç–æ–π –≤–µ—â–∏:", parse_mode='HTML')

    elif state['step'] == 'outfit_rating':
        state['current_item']['rating'] = message.text
        state['step'] = 'outfit_link'
        safe_send_message(message.chat.id, "üîó –í–≤–µ–¥–∏—Ç–µ <b>—Å—Å—ã–ª–∫—É</b> –Ω–∞ –≤–µ—â—å:", parse_mode='HTML')

    elif state['step'] == 'outfit_link':
        state['current_item']['link'] = message.text
        state['outfit_items'].append(state['current_item'])
        state['current_index'] += 1
        state['current_item'] = {}
        if state['current_index'] < state['outfit_total']:
            safe_send_message(message.chat.id, f"üë• –í–µ—â—å {state['current_index'] + 1}: –í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b>:", parse_mode='HTML')
            state['step'] = 'outfit_title'
        else:
            state['step'] = 'outfit_tags'
            safe_send_message(message.chat.id, "üçø –í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ –¥–ª—è –∞—É—Ç—Ñ–∏—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: #–ª–µ—Ç–æ #—Å—Ç–∏–ª—å):")

    elif state['step'] == 'outfit_tags':
        state['tags'] = message.text
        state['step'] = 'outfit_photo'
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data='finish_outfit'))
        bot.send_message(message.chat.id, "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Ñ–æ—Ç–æ</b> –¥–ª—è –∞—É—Ç—Ñ–∏—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ <b>–ì–æ—Ç–æ–≤–æ</b>", parse_mode='HTML', reply_markup=markup)


@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    user_id = message.from_user.id
    if user_id in user_state:
        step = user_state[user_id].get('step')
        if step in ['photo', 'outfit_photo']:
            photo_id = message.photo[-1].file_id
            user_state[user_id].setdefault('photos', []).append(photo_id)
        elif step == 'user_photo':
            photo_id = message.photo[-1].file_id
            user_state[user_id].setdefault('photos', []).append(photo_id)


def scheduler_loop():
    while True:
        now = datetime.now().strftime('%H:%M')
        for post in scheduled_posts[:]:
            if post['time'] == now:
                try:
                    bot.send_media_group(CHANNEL_ID, post['media'])
                    scheduled_posts.remove(post)
                except Exception as e:
                    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", e)
        time.sleep(30)


threading.Thread(target=scheduler_loop, daemon=True).start()


while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print("–û—à–∏–±–∫–∞:", e)
        time.sleep(5)

